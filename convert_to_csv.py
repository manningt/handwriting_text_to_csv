#!/usr/bin/env python3
'''
This program parses a text file generated by pen2txt.com which processes a visitor log using handwriting recogition.
The output is a CSV file with date,name,zip,email,visit-reason
'''

import sys
import os
import argparse
import re
from pathlib import Path
import logging
# logging.basicConfig()
# logging.getLogger().setLevel(logging.DEBUG)

def parse_file(filename):
   fields = ['Date: ', 'Name: ', 'Zipcode: ', 'Email Address: ', 'How did you hear about us']
   # ignoring Size: and Party:
   input_lines = []
   output_lines = []
   field_values = [None] * len(fields)

   try:
      with open(filename, 'r') as file:
         input_lines = file.read().splitlines()
   except:
      print(f'could not read or parse {filename}')

   lines_to_process = len(input_lines)
   for i in range(lines_to_process):
      if input_lines[i].strip():
         #non-blank line, so process field
         this_line = re.sub('\\[Not Provided\\]', '', input_lines[i])
         this_line = this_line.strip()
         if 'Size: ' in this_line or 'Party: ' in this_line:
            continue
         for idx, field in enumerate(fields):
            if field in this_line:
               # the replace() is used to remove the question mark in How did you hear...
               field_values[idx] = re.sub(field,'', this_line).replace('?', '').strip()
         # print(f'{input_lines[i]=} {field=}')
      else:
         #blank indicates a new record
         this_record = ''
         for j in range(len(fields)):
            if field_values[j] is not None \
               and field_values[j] != '[Not Provided]' \
               and field_values[j] != '-' \
               and field_values[j] != 'N/A':
               this_record += field_values[j].title()
            if j < (len(fields)-1):
               this_record += ','

         output_lines.append(this_record)
         field_values = [None] * len(fields)
   
   return output_lines


if __name__ == "__main__":
   argParser = argparse.ArgumentParser()
   argParser.add_argument("input", type=str, help="input filename with path")

   args = argParser.parse_args()
   # print(f'\n\t{args.input= } {args.auth_path= }\n\t{args.dont_email= } {args.parse_only= }')

   if args.input is None:
      sys.exit("No file selected to parse.")
   elif Path(args.input).is_file():
      filename = args.input
   else:
      sys.exit("file selected is not a file.")

   csv_filename = f'{Path(filename).stem}.csv'
   if Path(csv_filename).is_file():
      sys.exit(f"{csv_filename} already exists.")

   name_list = parse_file(filename)
   if name_list is None or len(name_list) == 0:
      print(f"Parsing of {filename} failed")
   else:
      with open(csv_filename, 'w') as fp:
          fp.write('\n'.join(name_list))
      print(f'wrote {csv_filename} with {len(name_list)} lines')
      # for i in range(len(name_list)):
      #    print(name_list[i])

'''
original parse when didn't save the output using the copy icone
         lines = file.read().split('Date: ')
         lines.pop(0) #remove first entry because it's a blank line
         for i in range(len(lines)):
            lines[i] = re.sub('^.* Name: ', '', lines[i])
            lines[i] = re.sub(' Party:.* Zipcode: ', ',', lines[i])
            lines[i] = re.sub(' Size:.* Email Address: ', ',', lines[i])
            lines[i] = re.sub('\\[Not Provided\\]', '', lines[i])
'''